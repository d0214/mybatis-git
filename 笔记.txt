Mybatis是一款优秀的持久层框架
官网文档(https://mybatis.org/mybatis-3/zh/index.html)
1.支持定制化SQL、存储过程以及高级映射
2.避免了几乎所有的JDBC代码和手动配置参数以及获取结果集
3.可以使用简单的XML或注解来配置和映射原生类型、接口以及Java的POJO(Plain Old Java Objects,普通老式Java对象)为数据库中的记录。

持久化：
数据持久化
1.持久化就是将程序的数据在持久状态和瞬时状态转化的过程
2.内存：断电即失
3.数据库，IO文件持久化

为什么需要持久化：
    有一些数据不能丢失
    内存太贵

持久层
    DAO层、Service层、Controller层
    完成持久化工作的代码块
    层界限十分明显

日志工厂：
mybatis中具体使用哪一个日志,需要在设置中设定(settings)
logImpl	指定 MyBatis 所用日志的具体实现，未指定时将自动查找。
SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING

LOG4J
STDOUT_LOGGING 标准日志输出

日志级别：
    ALL    最低等级的，用于打开所有日志记录。

    TRACE  designates finer-grained informational events than the DEBUG.Since:1.2.12，很低的日志级别，一般不会使用。

    DEBUG  指出细粒度信息事件对调试应用程序是非常有帮助的，主要用于开发过程中打印一些运行信息。

    INFO   消息在粗粒度级别上突出强调应用程序的运行过程。打印一些你感兴趣的或者重要的信息，这个可以用于生产环境中输出程序运行的一些重要信息，但是不能滥用，避免打印过多的日志。

    WARN   表明会出现潜在错误的情形，有些信息不是错误信息，但是也要给程序员的一些提示。

    ERROR  指出虽然发生错误事件，但仍然不影响系统的继续运行。打印错误和异常信息，如果不想输出太多的日志，可以使用这个级别。

    FATAL  指出每个严重的错误事件将会导致应用程序的退出。这个级别比较高了。重大错误，这种级别你可以直接停止程序了。

    OFF    最高等级的，用于关闭所有日志记录。

    log4j建议只使用四个级别，优先级从高到低分别是ERROR、WARN、INFO、DEBUG




Mybatis分页插件：
PageHelper


面向对象编程
面向接口编程
面向过程编程
动态代理
静态代理
反射